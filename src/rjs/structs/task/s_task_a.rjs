import 'STask', '../s_task'
import 'Helper', '../../helper'

export default class STaskA < STask
  def initialize language
  info = """
      <p>#{language.get_translate_task(:a, 0)}</p>
      <h2>#{language.get_translate_task(:a, 1)}</h2
      <p>#{language.get_translate_task(:a, 2)}</p>

      <h3>#{language.get_translate_task(STask::EXAMPLE, 0)}</h3>
      <strong>'1 5 -3 4 2' => '-3 5'</strong>

      <p>#{language.get_translate_task(:a, 3)}</p>
    """
    code = '''
def vector_correction(str_nums)
  
end
    '''
    code_result = '''
def vector_correction_result(str_nums)
  return str_nums.split(" ").minmax.join(" ")
end
    '''

    super info, code.trim(), code_result.trim()
  end

  def self.generate_input(length)
    result = []
    (0...length).step(1) do |i|
      number = Helper.random_int(-10, 10)
      result << number
    end
    return result.join(' ')
  end

  def code_evaluation code
    input = STaskA.generate_input Helper.random_int(5, 10)

    return """
#{code}
#{self.code_result}

code = vector_correction('#{input}')
code_result = vector_correction_result('#{input}')
\"\#{code}#{STask.UNIQ_SYM}\#{code_result}\"
    """.trim()
  end
end