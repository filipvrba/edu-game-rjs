# https://www.gafferongames.com/post/fix_your_timestep/

class Clock
  def initialize
    @time = Date.now()
    @fps_time = 1_000
    @fix_dt = Number((1 / 60).toFixed(6))
  end

  def delta_time(&callback)
    current_time = Date.now()
    dt = (current_time - @time) / @fps_time

    if dt > @fix_dt
      dt_count = Math.round(dt / @fix_dt)
      (0...dt_count).step(1) do |_|
        callback(@fix_dt)
      end
    end

    @time = current_time

    return dt
  end
end
class Dispatcher
  ADDED          = "added"
  READY          = "ready"
  UPDATE         = "update"
  DRAW           = "draw"
  PHYSICS_UPDATE = "physics_update"

  attr_reader :signals
  attr_writer :signals

  def initialize
    @signals = nil
  end

  def connect type_s, handler
    if @signals == undefined
      @signals = { }
    end

    if @signals[type_s] == undefined
      @signals[type_s] = []
    end

    if @signals[type_s].indexOf(handler) == -1
      @signals[type_s].push(handler)
    end
  end

  def disconnect type_s, handler
    if @signals == undefined
      return
    end

    signal_arr = @signals[type_s]

    unless signal_arr == undefined
      index = signal_arr.indexOf(handler)
    end

    unless index == -1
      signal_arr.splice(index, 1)
    end
  end

  def has_signal type_s, handler
    if @signals == undefined
      return false
    end

    return @signals[type_s] != undefined &&
           @signals[type_s].indexOf(handler) != -1
  end

  def emit_signal type_s, *args
    if @signals == undefined
      return
    end

    signal_arr = @signals[type_s]

    unless signal_arr == undefined
      if type_s == 'added' && typeof(this.ready) == 'undefined'
        return
      end

      signal_arr.slice(0).forEach do |sig|
        sig(*args)
      end
    end
  end
end
class Vector2
	UP    = Vector2.new( 0, -1)
	DOWN  = Vector2.new( 0,  1)
	LEFT  = Vector2.new(-1,  0)
	RIGHT = Vector2.new( 1,  0)
	ZERO  = Vector2.new( 0,  0)

	attr_accessor :x, :y

  def initialize x = 0, y = 0
    @x = x
    @y = y
  end

	def w
		return @x
	end

	def h
		return @y
	end

  def length
		return Math.sqrt(@x * @x + @y * @y)
	end

  def lerp vector, alpha
		@x += ( vector.x - @x ) * alpha
		@y += ( vector.y - @y ) * alpha
		return self
	end

  def normalized
		v = this.clone
		v._normalize
		return v
	end

  def multiply vector
		@x *= vector.x
		@y *= vector.y
		return self
  end

  def multiply_scalar scalar
		@x *= scalar
		@y *= scalar
		return this
	end

  def clone
		return this.constructor.new @x, @y
	end

  def add vector
		@x += vector.x
		@y += vector.y
		return self
	end

  def sub vector
		@x -= vector.x
		@y -= vector.y
		return self
	end

  def sub_scalar scalar
		@x -= scalar
		@y -= scalar
		return self
  end

  def equals vector
		return vector.x == @x && vector.y == @y
	end

  def distance_to vector
		return Math.sqrt( distance_to_squared(vector) )
	end

  def distance_to_squared vector
    dx = @x - vector.x
    dy = @y - vector.y
		return dx * dx + dy * dy
  end

  def dot vector
		return @x * vector.x + @y * vector.y
  end

  # private
  def _normalize
		l = @x * @x + @y * @y
	  unless l == 0
			l = Math.sqrt(l)
			@x /= l
			@y /= l
    end
		return self
  end
end
class Net

  def self.get_json url, &callback
    fetch(url)
    .then(lambda do |response|
      response.json()
    end)
    .then(lambda do |data|
      callback(data)
    end)
  end
end

class TDRenderer
  DIMENSION = '2d'

  def initialize canvas
    @canvas = canvas
    @clock  = Clock.new
  end

  def set_size width, height
    @canvas.width = width
    @canvas.height = height
  end

  def renderer
    @canvas.getContext(DIMENSION)
  end

  def render scene
    renderer.clearRect(0, 0, @canvas.width, @canvas.height)

    scene.emit_signal(Dispatcher::UPDATE, @clock.delta_time() do |f_dt|
      scene.emit_signal(Dispatcher::PHYSICS_UPDATE, f_dt)
    end)
    scene.emit_signal Dispatcher::DRAW, renderer
  end
end
class SSprite
  attr_accessor :position, :size

  def initialize source_position, source_size
    @position  = source_position
    @size      = source_size
  end
end

class BasicObject < Dispatcher
  attr_reader :id, :parent, :children
  attr_writer :id, :parent

  def initialize
    super

    @id = undefined
		@parent = nil
		@children = []
  end

  def add object, id = undefined
    if object == self
      console.error "#{self.class.name}.add: object can't be added as a child of itself."
      return self
    end

    if object
      unless object.parent == nil
        object.parent.remove(object)
      end

      object.parent = self

      unless id == undefined
        object.id = id
      end

      @children.push(object)
      
      if defined? object.update_global_position
        object.update_global_position()
      end

      add_signals(object)
    else
      console.error "#{self.class.name}.add: object not an instance of #{self.class.name}"
    end

    return self
  end

  def add_signals object
    # Added
    if defined? object.ready
      object.ready()
    end

    # Physics Update
    if defined? object.physics_update
      object.physics_update_handler = lambda { |dt| object.physics_update dt }
      get_scene(true).connect(Dispatcher::PHYSICS_UPDATE, object.physics_update_handler)
    end

    # Update
    if defined? object.update
      object.update_handler = lambda { |dt| object.update dt }
      get_scene(true).connect(Dispatcher::UPDATE, object.update_handler)
    end

    # Draw
    if defined? object.draw
      object.draw_handler = lambda { |ren| object.draw ren }
      get_scene(true).connect(Dispatcher::DRAW, object.draw_handler)
    end
  end

  def remove object
    index = @children.indexOf(object)
    unless index == -1
      object.id = undefined
      object.parent = nil
      @children.splice(index, 1)
    end

    return self
  end

  def free()
    if @children.length > 0
      _children = @children.slice()  # Clone array
      _children.forEach do |child|
        child.free()
      end
    else
      if @parent
        free_signals()
        @parent.remove(self)
      end
    end

    if @parent
      @parent.free()
    end
  end

  def free_signals()
    # this.signals = nil
    if defined? self.physics_update
      get_scene(true).disconnect(Dispatcher::PHYSICS_UPDATE, self.physics_update_handler)
    end

    if defined? self.update
      get_scene(true).disconnect(Dispatcher::UPDATE, self.update_handler)
    end

    if defined? self.draw
      get_scene(true).disconnect(Dispatcher::DRAW, self.draw_handler)
    end
  end

  def get_scene(is_root = false)
    _scene  = self
    _parent = _scene.parent

    while true
      if is_root
        if _parent == nil
          break
        end
      else
        super_class_name = Object.getPrototypeOf(
                           Object.getPrototypeOf(_parent)).constructor.name

        is_scene_name = _parent.constructor.name == Scene::NAME_SCENE ||
                        super_class_name == Scene::NAME_SCENE
        is_level_name = _parent.constructor.name == 'Level' ||
                        super_class_name == 'Level'

        if is_scene_name or is_level_name
          _scene = _parent
          break  
        end
      end

      _scene  = _parent
      _parent = _scene.parent
    end

    return _scene 
  end
  
  def find_child(id)
    result = nil
    for i in @children
      child = @children[i]
      if child.id == id
        result = child
        break
      end
    end

    return result
  end
end

class Object2D < BasicObject
  attr_accessor :position, :scale
  attr_writer :global_position

  def initialize
    super

    @position = Vector2.new
    @global_position = Vector2.new
    @scale = 1
  end

  def global_position
    update_global_position()
    return @global_position
  end

  def update_global_position()
    if this.parent == nil
      return
    end

    # unsafe
    add_vector = this.parent._global_position.clone.add(@position)
    unless @global_position.equals(add_vector)
      @global_position = add_vector
    end
    # end
  end

  def update_world()
    if this.children.length > 0
      this.children.forEach do |child|

        if defined? child.update_global_position
          child.update_global_position()
          child.update_world()
        end
      end
    else
      if defined? this.update_global_position
        this.update_global_position()
      end
    end
  end
end

class Scene < Object2D
  NAME_SCENE = "Scene"

  def initialize
    super
    self.id = "scene_r"
  end

  def ready()
    unless this.parent
      self.global_position = self.position
    else
      self.update_global_position()
    end
  end
end

class AnimationSprite < Object2D
  attr_accessor :frame_speed
  attr_reader :current_tile

  def initialize frame_speed = 0.25
    super
    @handlers = {}
    @handlers_length = lambda { Object.keys(@handlers).length }

    @tiles  = BasicObject.new
    @sprite = Sprite.new

    @current_tile = nil
    @bitwase = 0
    @scale = 1
    @time = 0
    @frame_speed = frame_speed
  end

  def ready()
    self.add @tiles, 'tiles'

    @sprite.scale = @scale
    self.add @sprite, 'sprite'
  end

  def is_update_unlock
    result = true
    @tiles.children.forEach do |t|
      if Math.pow( @handlers_length.call() + 1, 2) & @handlers[t.id].bit == 0
        result = false
      end
    end
    return result
  end

  def update dt
    unless is_update_unlock
      return
    end
    if @current_tile == nil
      return
    end

    # unsafe
    self.global_position = self.parent.global_position
    # end

    @time += dt
    if @time >= @frame_speed
      @time = 0
      @current_tile.id_tile = (@current_tile.id_tile + 1) % Object.keys(@current_tile.sprites).length
      @sprite.s_sprite = @current_tile.sprites[@current_tile.id_tile]
    end
  end

  def add_tile tile
    @handlers[tile.id] = {
      "bit": Math.pow( @handlers_length.call() + 1, 2),
      "fn": lambda { @bitwase |= @handlers[tile.id].bit }
    }

    tile.connect(Tile::SPRITE_READY, @handlers[tile.id].fn)
    @tiles.add tile, tile.id
  end

  def play_tile id_tile
    @current_tile = @tiles.find_child(id_tile)

    if @current_tile == nil
      console.error "Since this tile '#{id_tile}', isn't on the list, it won't launch. " +
                    "Add it, please."
      return
    end

    @current_tile.id_tile = 0
    @sprite.img = @current_tile.img
  end

  def free()
    @tiles.children.forEach do |t|
      t.disconnect(Tile::SPRITE_READY, @handlers[t.id].fn)
    end
    @handlers = nil

    super
  end
end

class Grid < BasicObject
  attr_accessor :scale, :visible

  def initialize size_v
    super

    @size_v = size_v
    @scale = 1
    @visible = true
  end

  def draw r
    unless @visible
      return
    end

    x = @size_v.w * @scale
    y = @size_v.h * @scale
    r.lineWidth = 1
    r.strokeStyle = "black"

    # x
    (0...r.canvas.width / x).step(1) do |i|
      r.beginPath()
      r.moveTo(x * i, 0)
      r.lineTo(x * i, r.canvas.height)
      r.fill()
      r.stroke()
    end

    # y
    (0...r.canvas.height / y).step(1) do |i|
      r.beginPath()
      r.moveTo(0, y * i)
      r.lineTo(r.canvas.width, y * i)
      r.fill()
      r.stroke()
    end
  end
end

class KinematicBody < Object2D
  attr_reader :physics_direction, :is_move, :is_move_vertical

  def initialize
    super

    @previoud_position = Vector2.new
    @physics_direction = Vector2.new

    @is_move          = false
    @is_move_vertical = false
  end

  def update dt
    @previoud_position = self.position.clone
  end

  def physics_update dt
    @physics_direction = self.position.clone.sub(@previoud_position).normalized

    if @physics_direction.equals(Vector2.new)
      @is_move = false
    else
      @is_move = true
    end

    if @physics_direction.equals(Vector2::UP) or @physics_direction.equals(Vector2::DOWN)
      @is_move_ladder = true
    elsif @physics_direction.equals(Vector2::LEFT) or @physics_direction.equals(Vector2::RIGHT)
      @is_move_ladder = false
    end
  end
end

class Level < Scene
  def self.dimension_loop(dimension, &callback)
    i = 0
    (0...dimension.h).step(1) do |y|
      (0...dimension.w).step(1) do |x|
        vec = Vector2.new(x, y)
        callback(vec, i)
        i += 1
      end
    end
  end
end

class Sprite < Object2D
  attr_accessor :scale, :s_sprite, :img

  def initialize s_sprite
    super

    @scale = 1
    @s_sprite = s_sprite
    @img = nil
  end

  def ready()
    if @s_sprite 
      set_position()
    end
  end

  def set_position()
    this.position = Vector2.new(-((@s_sprite.size.w * @scale)/2), -((@s_sprite.size.h * @scale)/2))
  end

  def draw r
    if @img and @s_sprite
      r.drawImage(@img, @s_sprite.position.x, @s_sprite.position.y, @s_sprite.size.w, @s_sprite.size.h,
        this.global_position.x, this.global_position.y, @s_sprite.size.w * @scale, @s_sprite.size.h * @scale)
    end
  end
end

class Tile < BasicObject
  SPRITE_READY = "gtspr"

  attr_accessor :img, :size
  attr_reader :sprites

  def initialize size, img = nil
    super

    @img = img
    @size = size
    @sprites = nil
    @is_error = false
  end

  def update dt
    # You need to wait until the functions are
    # synchronized because the image has a delay.
    if @img == nil
      if @is_error == false
        @is_error = true
        console.error "For this class '#{self.constructor.name}', there is no image. " +
                      "(SSprite generation won't take place.)"
      end

      return
    end

    unless @img.width == 0 and @img.height == 0
      if @sprites == nil
        @sprites = generate_s_sprites @size
        self.emit_signal SPRITE_READY, @sprites
      end
    end
  end

  def get_s_sprite id
    return @sprites[id]
  end

  def generate_s_sprites size
    w_img     = @img.width
    h_img     = @img.height
    dimension = Vector2.new(w_img / size.w, h_img / size.h)

    result_h = { }
    Level.dimension_loop(dimension) do |vec, i|
      position_vec = Vector2.new(vec.x * @size.x, vec.y * @size.y)
      result_h[i] = SSprite.new(position_vec, @size)
    end

    return result_h
  end
end

class Canvas2DElement < HTMLElement
  RESIZE = "resize"

  attr_reader :scene_r

  def initialize
    super
    @resizeHandler = lambda { resize() }

    @renderer = TDRenderer.new init_canvas("c2d")
    @scene_r = Scene.new
    @scene_r.ready()
    resize()  # change renderer size
  end

  def init_canvas id
    template = document.createElement( 'template' )
    template.innerHTML = """
      <style type='text/css'>
      canvas {
          position: fixed;
          top: 0;
          left: 0;
          outline: none;
          z-index: -1;
      }
      </style>

      <canvas id='#{id}'></canvas>
    """

    this.attachShadow( { mode: 'open' } )
    this.shadowRoot.appendChild( template.content.cloneNode( true ) )
    return this.shadowRoot.getElementById(id);
  end

  def tick()
    @renderer.render @scene_r
    requestAnimationFrame lambda { tick() }
  end

  def resize()
    @renderer.set_size(window.innerWidth, window.innerHeight)
    @scene_r.emit_signal RESIZE
    @scene_r.update_world()
  end

  def win_center_position
    widthHalf = @renderer._canvas.width / 2
    heightHalf = @renderer._canvas.height / 2
    return Vector2.new widthHalf, heightHalf
  end

  def connectedCallback()
    tick
    window.addEventListener RESIZE, @resizeHandler
  end

  def disconnectedCallback()
    @scene_r.free()
    window.removeEventListener RESIZE, @resizeHandler
  end
end

window.customElements.define( 'canvas-2d', Canvas2DElement )
