import 'TGrotto', '../objects/tiles/t_grotto'
import 'Player', '../objects/player'

import "*", as: "level_01_json", from: "../../../src/maps/level_01.json"

export default class Level01 < Level
  def initialize
    super "maps/level_01.json"
    @sprite_ready_handler = lambda { |s| sprite_ready(s) }

    @scale = 2
  end

  def ready()
    @tiles = Object2D.new
    self.add @tiles, 'tiles'

    @grotto = TGrotto.new
    @grotto.connect Tile::SPRITE_READY, @sprite_ready_handler
    self.add @grotto, 'grotto'

    @tile_ids = level_01_json.layers[0].data
    @size_w = level_01_json.width
    @size_h = level_01_json.height

    self.position = Vector2.new(-(@size_w * @scale * @grotto.size.w) / 2,
                                -(@size_h * @scale * @grotto.size.h) / 2)
    super
  end

  def sprite_ready sprites
    generate_level()

    player = Player.new
    player.position = Vector2.new(@grotto.size.x * 1, @grotto.size.y * 1)
    self.add player, "player"

    @tiles.update_global_position()
  end

  def generate_level()
    
    dimension = Vector2.new(@size_w, @size_h)
    tile_dimensions = level_01_json.layers
    tile_dimensions.forEach do |td|

      if td.type == "tilelayer"

        tile_ids = td.data
        Level.dimension_loop(dimension) do |vec, i|
          id = tile_ids[i] + level_01_json.compressionlevel
          
          sprite = Sprite.new @grotto.get_s_sprite(id)
          sprite.img = @grotto.img
          @tiles.add sprite, "grotto_#{i}"
          sprite.scale = @scale
          sprite.position = Vector2.new(vec.x * @grotto.size.x * sprite.scale,
                                        vec.y * @grotto.size.y * sprite.scale)
        end
      end
    end
  end

  def free()
    @grotto.disconnect GrottoTile::SPRITE_READY, @sprite_ready_handler
    self.disconnect Level::JSON_READY, @json_ready_handler
    super
  end
end
